

extends network_layout

//- Don't display that title
block title
//- Replace the network title with the editable one
block network_title
  h1 List of Node
  h3
    | Name : 
    a#change-name(href='#')
      span#name= network.name
      i.glyphicon.glyphicon-pencil(style='font-size: 20px;')
    input#name-input.form-control(type='text' style='width: 200px; display: none;')
    <br><br>
    |  
    p Network ID : (#{network.nwid}):
  script.
    $(function() {
      var nwurl = '/controller/network/#{network.nwid}';
      var name = !{JSON.stringify(network.name)};

      function toggleNameEditor(show) {
        $('#change-name').css('display', !show ? '' : 'none');
        $('#name-input').css('display', show ? 'inline-block' : 'none');
      }

      function submit() {
        var newName = $('#name-input').val();
        if (newName != name) {
          name = newName;
          $.post(nwurl + '/name', {'name': name})
            .done(function () {
              $('#name').text(newName);
            });
        }
        toggleNameEditor(false);
      }

      $('#change-name').on('click', function() {
        toggleNameEditor(true);
        $('#name-input').val(name);
        $('#name-input').focus();
      });
      $('#name-input').on('focusout', submit);
      $('#name-input').keypress(function (e) {
        if (e.which == 13) submit();
      });
    });

block net_content
  style.
     th{
      color:black;
      padding: 10px;
      text-align: left;
      background-color:  #8db8eb ;
    }
    table{
     margin-top:10px;
     box-shadow: 5px 5px 5px 5px rgba(0, 0, 0, 0.15);
 
    }
    .ping{
      margin-top:10px;
      
    }
    .tootls{
      margin-top:20px;
      
      font-size:20px;
    }
   
  - const nwurl = '/controller/network/' + network.nwid;

  
  if (members !== undefined)
    script.
      $(function() {
        const url = "#{nwurl}/members";
        $('.authCheck').on('click', function() {
          $.post(url, {'id': this.value, 'auth': this.checked});
        });
        $('.bridgeCheck').on('click', function() {
          $.post(url, {'id': this.value, 'activeBridge': this.checked});
        });
        $('.text').on('change', function() {
          $.post(url, {'id': this.name, 'name': this.value});
        });
      });
    h3#members All Member = #{members.length}
    form(method='POST' action='')
      table.table.table-responsive.table-striped.table-hover
        tr
          th(width='15%')
            | Member name
          th(width='15%')
            | Member ID
          th(width='10%')
            | Authorized
          th(width='10%')
            | Active bridge
          th(width='17%')
            | IP assignment
          th(width='17%')
            | Peer status
          th(width='13%')
            | Peer address 
          th(width='13%')
            | latency
          th(width='5%')
            = ""
        each member in members
          - const peer = member.peer;
          tr
            - const url = nwurl + '/member/' + member.id
            //Member ID
            td
              input.form-control.text(type='text' name=member.id value=member.name)
            td
              a(href=url) #{member.id}
            //authorized
            td
              input.authCheck(type='checkbox' value=member.id checked=(member.authorized? true : false))
            //activeBridge
            td
              input.bridgeCheck(type='checkbox' value=member.id checked=(member.activeBridge? true : false))
            //IP
            td
              each ipAssignment in member.ipAssignments
                a(href=nwurl + '/member/' + member.id + '/ipAssignments')
                  each digit in ipAssignment
                    = digit
                  = ' '
              else
                a(href=nwurl + '/member/' + member.id + '/ipAssignments')
                  | IP assignment
            //Peer
            td
              if (peer && peer.latency != -1 && peer.versionMajor != -1)
                if (peer.latency != -1)
                  span(style='color: green;')
                    | ONLINE 
                else
                  span(style='color: orange;')
                    | RELAY 
              else if (member.id == zt_address)
                span(style='color: green;') CONTROLLER
              else
                span(style='color: red;') OFFLINE
            //ipaddress
            td
              if (peer)
                each path in peer.paths
                  - const [ip, port] = path.address.split('/');
                  = ip
                  span(style='color: gray;') /#{port}
                  = ' '
            td 
              if (peer)
                if (peer.latency != -1)
                  br
                  | (#{peer.latency} ms)
            td
              a(href=url + '/delete')
                i.glyphicon.glyphicon-trash
        else
          .alert.alert-info
            strong There are no members on this network - invite users to join #{network.nwid}
    .ping
      button(onclick="pingIP()") Ping IP
      p#result
      script.
        function pingIP() {
          var ipAddress = prompt("Please enter the IP address you want to ping:", "");
          if (ipAddress != null) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function() {
              if (xhr.status === 200) {
                document.getElementById("result").innerHTML = ipAddress + " is online";
              } else {
                document.getElementById("result").innerHTML = ipAddress + " is offline";
              }
            };
            xhr.open("GET", "https://cors-anywhere.herokuapp.com/http://" + ipAddress);
            xhr.send();
          }
        }
    .tootls
      p Additional customization tootls 
    a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/routes') role='button') Routes
    a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/ipAssignmentPools') role='button') Assignment Pools
    a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/v4AssignMode') role='button') IPv4 Assign Mode
    a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/v6AssignMode') role='button') IPv6 Assign Mode
    a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/dns') role='button') DNS
    a.btn.btn-primary(style="margin: 5px" href=(nwurl + '/detail') role='button') Detail

    .card
      h3 Network Latency
      .icon
        i.fas.fa-network-wired
      p.value
        if (peer)
                if (peer.latency != -1)
                  br
                  | (#{peer.latency} ms)
      .progress-bar
        .progress(style="width: 80%;")


  //- a.btn.btn-default(href='' name='refresh' role='button') Refresh

  //- h3#detail Detail for network
  //- each value, key in network
  //-   .row(style='margin: 5px 0;')
  //-     .col-sm-2
  //-       a(href= network.nwid + '/' + key) #{key}:
  //-     .col-sm-10
  //-       +json_value(value)

  //- a.btn.btn-default(href='/controller/networks' name='networks' role='button' style='margin-top: 10px;') Networks
